#ifndef TASKBOARD_H
#define TASKBOARD_H

#include <QtGlobal>

#include "core/sources/data/taskboard/TaskTypes.h"

/**
 * @ TaskBoard - класс-сущность доски задач.
 *
*/
class TaskBoard {


    // TODO: пулы задач:

    // 1 Сервер
    // 1.1 Пул задач:
    //   -   хранит задачи которые пользователь локально создал и задачи, которые загружают сюда другие пользователи.

    // 1.2 Пул локальных задач:
    //   -   хранит задачи, которые пользователь создал локально и не загрузил на сервер.

    // 1.3 Пул историй незавершенных задач:
    //   -   хранит истории задач, история формируется при первой загрузке задачи сюда, и расширяется при каждом обновлении задачи;

    // 1.4 Пул историй завершенных задач:
    //   -   хранит истории завершенных задач.


    // 2 Клиент
    // 2.1 Пул задач:
    //   -   Снимок пула задач с сервера ( см. пункт 1.2 )

    // 2.2 Пул локальных задач:
    //   -   хранит задачи, которые пользователь создал локально и не загрузил на сервер.

    // 2.2 Пул историй незавершенных задач:
    //   -   Снимок пула незавершенных историй задач с сервера ( см. пункт 1.3 ).

    // 2.3 Пул историй завершенных задач:
    //   -   Снимок пула историй завершенных задач с сервера ( см. пункт 1.4 ).


    private:

        /**
         * @brief id - идентификационный номер доски задач
         */
        quint16 id;

        // Список доступных типов для задач
        TaskTypes *availableTaskTypes;

    public:

        /**
         * @brief TaskBoard - конструктор по умолчанию
        */
        TaskBoard();

        /**
         * @brief TaskBoard - конструктор по умолчанию, с аргументами
         * @param id - идентификационнный номер доски задач
         * @param taskTypes - список типов задач
        */
        TaskBoard(const quint16 id, TaskTypes *taskTypes);

        /**
         * @brief TaskBoard - конструктор по копирования
         * @param other - другая доска задач
        */
        TaskBoard(TaskBoard &other);

        /**
         * @brief operator= - перегруженный оператор инициализации
         * @description Удалён.
        */
        TaskBoard& operator=(TaskBoard &other) = delete;

        /**
         * @brief ~TaskBoard - деструктор. Очищает память от полей класса
        */
        ~TaskBoard();

};

#endif // TASKBOARD_H
